<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on ret2school</title>
    <link>https://ret2school.github.io/tags/web/</link>
    <description>Recent content in web on ret2school</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ret2school.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Hitcon 2021 - web] Vulpixelize</title>
      <link>https://ret2school.github.io/post/vulpixelize/</link>
      <pubDate>Sun, 02 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/vulpixelize/</guid>
      <description>HITCON 2021 - Vulpixelize (232 points) My solution for this challenge is maybe unintended and not very technical, but it works :)
 We can send a URL that the bot will visit.
It then takes a screenshot of the page, blurs it and returns us the result :
@app.route(&amp;#39;/submit&amp;#39;, methods=[&amp;#39;GET&amp;#39;]) def submit(): path = &amp;#39;static/images/%s.png&amp;#39; % uuid.uuid4().hex url = request.args.get(&amp;#39;url&amp;#39;) if url: # secrity check if not url.startswith(&amp;#39;http://&amp;#39;) and not url.</description>
    </item>
    
    <item>
      <title>[AeroCTF 2021 - web] Localization is hard</title>
      <link>https://ret2school.github.io/post/localization_is_hard_wu/</link>
      <pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/localization_is_hard_wu/</guid>
      <description>[Localization is hard - web] AeroCTF 0x00 To solve this challenge we had to exploit a SSTI on Thymeleaf and lead that into a Remote Code Execution
0x01 Discovering the vulnerability The challenge description talk about a Coffee who made for CTFers and in English and in Russian.
Btw , the challenge description tell us that the flag should be located at / on the file system, this maybe mean that we have to get an access to the machine to read the flag.</description>
    </item>
    
    <item>
      <title>[UnionCTF 2021 - web] Cr0wnAir</title>
      <link>https://ret2school.github.io/post/writeup_cr0wnair/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://ret2school.github.io/post/writeup_cr0wnair/</guid>
      <description>The challenge can be found right here.
UnionCTF - Cr0wnAir To solve this challenge, we had to exploit a vulnerability in jpv which allows us to bypass the regex validation in order to get a JWT. Then, we were able to change the algorithm from RS256 to HS256 and forge a new JWT with the public key, a key that we were able to retrieve thanks to a weak e.</description>
    </item>
    
  </channel>
</rss>
